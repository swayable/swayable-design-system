
$orange-100: rgb(255, 250, 240);
$orange-200: rgb(254, 235, 200);
$orange-300: rgb(251, 211, 141);
$lighter: rgb(242, 242, 242);
$red-100: rgb(255, 245, 245);
$orange-400: rgb(246, 173, 85);
$red-200: rgb(254, 215, 215);
$indigo-100: rgb(235, 244, 255);
$orange-500: rgb(237, 137, 54);
$red-300: rgb(254, 178, 178);
$indigo-200: rgb(195, 218, 254);
$orange-600: rgb(221, 107, 32);
$red-400: rgb(252, 129, 129);
$indigo-300: rgb(163, 191, 250);
$orange-700: rgb(192, 86, 33);
$yellow-100: rgb(255, 255, 240);
$red-500: rgb(245, 101, 101);
$indigo-400: rgb(127, 156, 245);
$orange-800: rgb(156, 66, 33);
$yellow-200: rgb(254, 252, 191);
$brand: rgb(37, 51, 65);
$red-600: rgb(229, 62, 62);
$indigo-500: rgb(102, 126, 234);
$orange-900: rgb(123, 52, 30);
$yellow-300: rgb(250, 240, 137);
$pink-100: rgb(255, 245, 247);
$white: rgb(255, 255, 255);
$indigo-600: rgb(90, 103, 216);
$yellow-400: rgb(246, 224, 94);
$pink-200: rgb(254, 215, 226);
$red-700: rgb(197, 48, 48);
$indigo-700: rgb(76, 81, 191);
$yellow-500: rgb(236, 201, 75);
$pink-300: rgb(251, 182, 206);
$red-800: rgb(155, 44, 44);
$indigo-800: rgb(67, 65, 144);
$yellow-600: rgb(214, 158, 46);
$pink-400: rgb(246, 135, 179);
$red-900: rgb(116, 42, 42);
$blue-100: rgb(235, 248, 255);
$indigo-900: rgb(60, 54, 107);
$yellow-700: rgb(183, 121, 31);
$pink-500: rgb(237, 100, 166);
$blue-200: rgb(190, 227, 248);
$yellow-800: rgb(151, 90, 22);
$pink-600: rgb(213, 63, 140);
$blue-300: rgb(144, 205, 244);
$teal-100: rgb(230, 255, 250);
$yellow-900: rgb(116, 66, 16);
$pink-700: rgb(184, 50, 128);
$purple-100: rgb(250, 245, 255);
$teal-200: rgb(178, 245, 234);
$pink-800: rgb(151, 38, 109);
$purple-200: rgb(233, 216, 253);
$blue-400: rgb(99, 179, 237);
$teal-300: rgb(129, 230, 217);
$pink-900: rgb(112, 36, 89);
$purple-300: rgb(214, 188, 250);
$blue-500: rgb(66, 153, 225);
$grey-100: rgb(247, 250, 252);
$teal-400: rgb(79, 209, 197);
$purple-400: rgb(183, 148, 244);
$blue-600: rgb(49, 130, 206);
$grey-200: rgb(237, 242, 247);
$teal-500: rgb(56, 178, 172);
$purple-500: rgb(159, 122, 234);
$blue-700: rgb(43, 108, 176);
$grey-300: rgb(226, 232, 240);
$teal-600: rgb(49, 151, 149);
$purple-600: rgb(128, 90, 213);
$blue-800: rgb(44, 82, 130);
$teal-700: rgb(44, 122, 123);
$purple-700: rgb(107, 70, 193);
$blue-900: rgb(42, 67, 101);
$grey-400: rgb(203, 213, 224);
$purple-800: rgb(85, 60, 154);
$green-100: rgb(240, 255, 244);
$grey-500: rgb(160, 174, 192);
$teal-800: rgb(40, 94, 97);
$purple-900: rgb(68, 51, 122);
$light: rgb(237, 237, 237);
$green-200: rgb(198, 246, 213);
$grey-600: rgb(113, 128, 150);
$dark: rgb(44, 46, 53);
$teal-900: rgb(35, 78, 82);
$green-300: rgb(154, 230, 180);
$grey-700: rgb(74, 85, 104);
$green-400: rgb(104, 211, 145);
$grey-800: rgb(45, 55, 72);
$green-500: rgb(72, 187, 120);
$grey-900: rgb(26, 32, 44);
$green-600: rgb(56, 161, 105);
$green-700: rgb(47, 133, 90);
$green-800: rgb(39, 103, 73);
$green-900: rgb(34, 84, 61);
$black: rgb(0, 0, 0);
$size-xxxl: 3rem;
$size-xxl: 2.4rem;
$size-xl: 1.8rem;
$size-l: 1.4rem;
$size-m: 1.2rem;
$size-s: 1.0rem;
$size-xs: 0.8rem;
$font-heading: "azo-sans-web",sans-serif;
$font-text: "roboto",sans-serif;
$font-mono: "roboto-mono",monospace;
$weight-bold: 700;
$weight-semi-bold: 600;
$weight-medium: 500;
$weight-normal: 400;
$weight-light: 200;
$opacity-disabled: 0.5;
$height-footer: 64px;
$tappable-square: 44px;
$duration-quickly: 0.08s;
$duration-slowly: 0.5s;
$z-index-modal: 9999;
$z-index-sticky: 100;
$media-query-m: (min-width: 768px);
$media-query-l: (min-width: 1024px);
$shadow-s: 0 0 0 1px rgba(92,106,196,.1);
$spacing-xl: 2px;
$spacing-l: 1px;
$spacing-m: 0;
$spacing-s: -0.5px;
$spacing-xs: -1px;
$radius-default: 3px;
$radius-circle: 50%;
$space-xxl: 128px;
$space-xl: 64px;
$space-l: 48px;
$space-m: 24px;
$space-s: 16px;
$space-xs: 8px;
$space-xxs: 4px;
$line-height-m: 1.6;
$line-height-s: 1.3;
$line-height-xs: 1;

/* VUE DESIGN SYSTEM SPACING HELPERS
--------------------------------------------- */

$spacing-ratio: 1.7;

/*
  INSET-SPACE: For interface containers.
  INSET-SQUISH-SPACE: For buttons, form elements, cells.
  STACK-SPACE: For vertically stacked content.
  INLINE-SPACE: For things displayed inline.
*/

// Create inset-space
//
// @param  {Number} inset-space to set
@mixin inset-space($value) {
  padding: $value;
}

// Create inset-squish-space
//
// @param  {Number} inset-squish-space to set
@mixin inset-squish-space($value) {
  padding: round($value / $spacing-ratio - 1px) $value round($value / $spacing-ratio);
}

// Create stack-space
//
// @param  {Number} stack-space to set
@mixin stack-space($value) {
  margin-bottom: $value;
  &:last-child {
    margin-bottom: 0;
  }
}

// Create inline-space
//
// @param  {Number} inline-space to set
@mixin inline-space($value) {
  margin-right: $value;
  &:last-child {
    margin-right: 0;
  }
}

/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES

  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)

  @param {Number}  $fallback    - Fallback for viewport-based units (optional)

  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:

  @include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

// Reset
@mixin reset {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

// Used to prevent text selection on an element
@mixin prevent-user-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

/// Used to hide an element visually, but keeping it accessible for
/// accessibility tools.
@mixin visually-hidden {
  // Need to make sure we override any existing styles.
  position: absolute !important;
  top: 0;
  clip: rect(1px, 1px, 1px, 1px) !important;
  overflow: hidden !important;
  height: 1px !important;
  width: 1px !important;
  padding: 0 !important;
  border: 0 !important;
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/
@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}

/* GLOBAL FUNCTIONS
--------------------------------------------- */

// Create a tint
//
// @param  {Color}  $color to tint
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Create a shade
//
// @param  {Color}  $color to shade
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Calculate color difference
// See https://www.w3.org/TR/AERT/#color-contrast for algorithm
//
// @param  {Color} $color of foreground
// @param  {Color} $color of background
// @return {Boolean}
@function color-difference($foreground, $background) {
  $r: (max(red($foreground), red($background))) - (min(red($foreground), red($background)));
  $g: (max(green($foreground), green($background))) - (min(green($foreground), green($background)));
  $b: (max(blue($foreground), blue($background))) - (min(blue($foreground), blue($background)));
  $sum-rgb: $r + $g + $b;

  @if $sum-rgb < 350 {
    @return "false";
  } @else {
    @return "true";
  }
}

// Set text color based on contrast
//
// @param  {Color}  $color to set
// @param  {Color}  $background color to test
// @param  {Color}  $fallback color to set in case contrast check fails
@function set-text-color($color, $background, $fallback: null) {
  @if $fallback == null {
    $fallback: #000;
  }
  @if (color-difference($color, $background) == "false") {
    @return $fallback;
  } @else {
    @return $color;
  }
}

/// Darkens the foreground color by the background color. This is the same as the
/// “multiply” filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.
@function rem($value) {
  $unit: unit($value);

  @if $unit == "rem" {
    @return $value;
  } @else if $unit == "px" {
    @return $value / $size-m * 1rem;
  } @else if $unit == "em" {
    @return $unit / 1em * 1rem;
  } @else {
    @error "Value must be in px, em, or rem.";
  }
}

/// Returns the value in pixels for a given rem value.
/// @param {Number} $value - The rem value to be converted.
/// @return {Number} The converted value in pixels.
@function px($value) {
  $unit: unit($value);

  @if $unit == "px" {
    @return $value;
  } @else if $unit == "em" {
    @return ($value / 1em) * $size-m;
  } @else if $unit == "rem" {
    @return ($value / 1rem) * $size-m;
  } @else {
    @error "Value must be in rem, em, or px.";
  }
}

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != "map" {
    @return null;
  }

  $output: "";
  $newline: "\A ";

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + "#{$newline}- #{$key} #{available-names($value, $level + 1)}";
    }
  } @else {
    $output: "(";
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ", ", "");
      $output: $output + "#{$key}#{$sep}#{available-names($value, $level + 1)}";
      $i: $i + 1;
    }

    $output: $output + ")";
  }

  @return $output;
}
